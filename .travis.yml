language: generic

env:
  global:
    - CACHE="$HOME/.local"
    - MPICH_VER="3.2"
    - MPICH_URL_HEAD="http://www.mpich.org/static/downloads/$MPICH_VER"
    - MPICH_URL_TAIL="mpich-${MPICH_VER}.tar.gz"
    - MPICH_DIR="$HOME/.local/usr/mpich"
    - MPICH_BOT_URL_HEAD="https://github.com/sourceryinstitute/opencoarrays/files/452136/"
    - MPICH_BOT_URL_TAIL="mpich-3.2_2.yosemite.bottle.1.tar.gz"
    - FC=gfortran-6
    - CC=gcc-6
    - CXX=g++-6

matrix:
  include:
    - os: osx
      env:
        - BUILD_TYPE="CodeCoverage"
          OSX_PACKAGES="gcc cmake"
    - os: osx
      env:
       - BUILD_TYPE="Release"
         OSX_PACKAGES="gcc cmake"
    - os: osx
      env:
       - BUILD_TYPE="InstallScript"
         OSX_PACKAGES="gcc"
    - os: linux
      sudo: false
      env:
        - BUILD_TYPE="CodeCoverage"
      cache:
        directories:
          - "$CACHE"
      addons:
        apt:
          sources:
            - george-edison55-precise-backports
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - gfortran-6
            - g++-6
            - binutils
            - cmake-data
            - cmake
    - os: linux
      sudo: false
      env:
        - BUILD_TYPE="Release"
      cache:
        directories:
          - "$CACHE"
      addons:
        apt:
          sources:
            - george-edison55-precise-backports
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - gfortran-6
            - g++-6
            - binutils
            - cmake-data
            - cmake
    - os: linux
      sudo: false
      env:
        - BUILD_TYPE="InstallScript"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - gfortran-6
            - g++-6

before_install:
  - |
    set -o errexit
    if [[ $TRAVIS ]] && [[ "X$TRAVIS_OS_NAME" = "Xosx" ]]; then
      export PATH="$PATH:$HOME/Library/Python/2.7/bin"
    else
      [[ -d "$CACHE/bin" ]] || mkdir -p "$CACHE/bin"
      [[ -d "$MPICH_DIR" ]] || mkdir -p "$MPICH_DIR"
      export PATH="$CACHE/bin:$PATH"
      $FC --version
      $CC --version
      $CXX --version
    fi
    set +o errexit

install:
  - |
    set -o errexit
    if [[ $TRAVIS ]] && [[ "X$TRAVIS_OS_NAME" = "Xosx" ]]; then
      brew update > /dev/null

      for pkg in $OSX_PACKAGES; do
        [[ "$(brew ls --versions $pkg)" ]] || brew install --force-bottle $pkg
        brew outdated $pkg || brew upgrade --force-bottle $pkg
      done
      if ! [[ "$(brew ls --versions mpich)" ]] && [[ "X$BUILD_TYPE" != "XInstallScript" ]]; then
        wget ${MPICH_BOT_URL_HEAD}${MPICH_BOT_URL_TAIL}
        brew install --force-bottle ${MPICH_BOT_URL_TAIL}
        if ! [[ "$(brew ls --versions mpich)" ]]; then
          brew install --force-bottle mpich
        fi
        mpif90 --version
        mpicc --version
        cmake --version
      elif [[ "X$BUILD_TYPE" = "XInstallScript" ]]; then # uninstall some stuff if present
        [[ "$(brew ls --versions cmake)" ]] && brew rm cmake || true
        [[ "$(brew ls --versions mpich)" ]] && brew rm mpich || true
        [[ "$(brew ls --versions openmpi)" ]] && brew rm openmpi || true
      fi
    elif [[ "X$BUILD_TYPE" != "XInstallScript" ]]; then # Ubuntu on Travis-CI, NOT testing install.sh
      if ! ( [[ -x "$HOME/.local/bin/mpif90" ]] && [[ -x "$HOME/.local/bin/mpicc" ]] ); then
        # mpich install not cached
        # could use prerequisites/build instead...
        wget "${MPICH_URL_HEAD}/${MPICH_URL_TAIL}"
        mv "$MPICH_URL_TAIL" "$MPICH_DIR/.."
        pushd "$MPICH_DIR/.."
        tar -xzvf "$MPICH_URL_TAIL"
        cd "${MPICH_URL_TAIL%.tar.gz}"
        ./configure --prefix="$MPICH_DIR"
        make -j 4
        make install
        popd
        for f in "$MPICH_DIR/bin/"*; do
          if [[ -x "$f" ]]; then
            ln -fs "$f" "$HOME/.local/bin/${f##*/}"
          fi
        done
      fi
      mpif90 --version
      mpicc --version
      cmake --version
    fi
    set +o errexit

script:
  - |
    set -o errexit
    if [[ "X$BUILD_TYPE" = "XInstallScript" ]]; then
      [[ -d "$HOME/opt" ]] || mkdir "$HOME/opt"
      [[ -d "$HOME/bin" ]] || mkdir "$HOME/bin"
      ln -fs "$(which gfortran-6)" "$HOME/bin/gfortran"
      ln -fs "$(which gcc-6)" "$HOME/bin/gcc"
      ln -fs "$(which g++-6)" "$HOME/bin/g++"
      export PATH="$PATH:$HOME/bin"
      ./install.sh --yes-to-all -i "$HOME/opt/opencoarrays" -j 4 -f "$HOME/bin/gfortran" -c "$HOME/bin/gcc" -C "$HOME/bin/g++"
    else
      mkdir cmake-build
      cd cmake-build
      cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME/OpenCoarrays" -DCMAKE_BUILD_TYPE="$BUILD_TYPE" ..
      make -j 4
      ctest --output-on-failure
      make install
      cd ..
    fi
    set +o errexit

after_success:
  - find . -name '*.gcno' -print
  - gcov-6 --version
  - bash <(curl -s https://codecov.io/bash) -x $(which gcov-6)

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/93dbafbdf76c1732a623
      - https://webhooks.gitter.im/e/935231573bf1b9f2fe40
    on_success: change  # options: [always|never|change]
    on_failure: always
    on_start: always
