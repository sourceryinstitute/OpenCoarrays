---
language: generic

os: osx

env:
  global:
    - CACHE="${HOME}/.local"
    - MPICH_VER="3.2"
    - MPICH_URL_HEAD="https://www.mpich.org/static/downloads/${MPICH_VER}"
    - MPICH_URL_TAIL="mpich-${MPICH_VER}.tar.gz"
    - MPICH_DIR="${HOME}/.local/usr/mpich"
    - MPICH_GCC6_BOT_URL_HEAD="https://github.com/sourceryinstitute/OpenCoarrays/files/979804/"
    - MPICH_GCC7_BOT_URL_HEAD="https://github.com/sourceryinstitute/OpenCoarrays/files/976779/"
    - MPICH_BOT_URL_TAIL="mpich-3.2_3.yosemite.bottle.1.tar.gz"
    - BUILD_TYPES="Release Debug RelWithDebInfo CodeCoverage"
  matrix:
    - GCC=6 OSX_PACKAGES="gcc@6 cmake"
    - GCC=7 OSX_PACKAGES="gcc cmake"

matrix:
  fast_finish: true
  include:
    - os: osx
      env:
        - BUILD_TYPE="InstallScript"
          OSX_PACKAGES="gcc@6"
          GCC=6
    - os: osx
      env:
        - OSX_PACKAGES="gcc cmake"
          GCC=7
          OPENCOARRAYS_DEVELOPER=ON
    - &ubuntu
      os: linux
      sudo: false
      env:
        - GCC=6
      cache:
        apt: false
        directories:
          - "$CACHE"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - george-edison55-precise-backports
          packages:
            - gcc-6
            - gfortran-6
            - g++-6
            - binutils
            - cmake-data
            - cmake
    # -
    #   <<: *ubuntu
    #   env:
    #     - GCC=7
    #   addons:
    #     apt:
    #       sources:
    #         - ubuntu-toolchain-r-test
    #         - george-edison55-precise-backports
    #       packages:
    #         - gcc-7
    #         - gfortran-7
    #         - g++-7
    #         - binutils
    #         - cmake-data
    #         - cmake
    -
      <<: *ubuntu
      env:
        - BUILD_TYPE="InstallScript"
          GCC=6
      cache: false
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-6
            - gfortran-6
            - g++-6
  allow_failures:
    - os: osx
      env:
        - OSX_PACKAGES="gcc cmake"
          GCC=7
          OPENCOARRAYS_DEVELOPER=ON

before_install:
  - export FC=gfortran-${GCC}
  - export CC=gcc-${GCC}
  - export CXX=g++-${GCC}
  - export MPICH_BOT_URL_HEAD=MPICH_GCC${GCC}_BOT_URL_HEAD
  - |
    set -o errexit
    if [[ (-n ${TRAVIS_TAG}) && (${TRAVIS_OS_NAME} == osx) ]] && ${TRAVIS_SECURE_ENV_VARS} ; then
      brew update > /dev/null
      [[ "$(brew ls --versions gpg2)" ]] || brew install gpg2
      brew outdated gpg2 || brew upgrade gpg2
      type -P openssl || brew install openssl
    fi
    if ! [[ "${TRAVIS_TAG}" ]] || ! ${TRAVIS_SECURE_ENV_VARS} ; then
      unset encrypted_ef4535c39461_key || true
      unset encrypted_ef4535c39461_iv || true
      rm subkey-328B3A0E-secret.asc{,.enc} || true

    fi
    if [[ "${TRAVIS_TAG}" ]] ; then
      curl https://izaakbeekman.com/izaak.pubkey.txt | gpg --import
      git tag -v ${TRAVIS_TAG}
    fi
    set +o errexit
  - |
    set -o errexit
    if [[ (-n ${TRAVIS}) && (${TRAVIS_OS_NAME} == osx) ]]; then
      export PATH="${PATH}:${HOME}/Library/Python/2.7/bin"
    else
      [[ -d "${CACHE}/bin" ]] || mkdir -p "${CACHE}/bin"
      [[ -d "${MPICH_DIR}" ]] || mkdir -p "${MPICH_DIR}"
      export PATH="${CACHE}/bin:${PATH}"
      ${FC} --version
      ${CC} --version
      ${CXX} --version
    fi
    set +o errexit

install:
  - |
    set -o errexit
    if [[ (-n ${TRAVIS}) && (${TRAVIS_OS_NAME} == osx) ]]; then
      brew update > /dev/null

      for pkg in ${OSX_PACKAGES}; do
        [[ "$(brew ls --versions ${pkg})" ]] || brew install --force-bottle ${pkg}
        brew outdated ${pkg} || brew upgrade --force-bottle ${pkg}
      done
      if [[ ${BUILD_TYPE} == InstallScript ]]; then # uninstall some stuff if present
        brew uninstall --force --ignore-dependencies cmake || true
        brew uninstall --force --ignore-dependencies mpich || true
        brew uninstall --force --ignore-dependencies openmpi || true
      else
        wget "${!MPICH_BOT_URL_HEAD}${MPICH_BOT_URL_TAIL}"
        brew install --force-bottle ${MPICH_BOT_URL_TAIL}
        if ! [[ "$(brew ls --versions mpich)" ]]; then
          brew install --force-bottle mpich
        fi
      fi
      mpif90 --version || mpif90 -show || true
      mpicc --version || mpicc -show || true
      cmake --version || true

    elif [[ ${BUILD_TYPE} != InstallScript ]]; then # Ubuntu on Travis-CI, NOT testing install.sh
      if ! [[ -x "${HOME}/.local/bin/mpif90" && -x "${HOME}/.local/bin/mpicc" ]]; then
        # mpich install not cached
        # could use prerequisites/build instead...
        wget "${MPICH_URL_HEAD}/${MPICH_URL_TAIL}"
        mv "${MPICH_URL_TAIL}" "${MPICH_DIR}/.."
        pushd "${MPICH_DIR}/.."
        tar -xzvf "${MPICH_URL_TAIL}"
        cd "${MPICH_URL_TAIL%.tar.gz}"
        ./configure --prefix="${MPICH_DIR}"
        make -j 4
        make install
        popd
        for f in "${MPICH_DIR}/bin/"*; do
          if [[ -x "${f}" ]]; then
            ln -fs "${f}" "${HOME}/.local/bin/${f##*/}"
          fi
        done
      fi
      mpif90 --version
      mpicc --version
      cmake --version
    fi
    set +o errexit

script:
  - |
    set -o errexit
    if [[ ${BUILD_TYPE} == InstallScript ]]; then
      ./install.sh --yes-to-all -i "${HOME}/opencoarrays" -j 4 -f "$(type -P "${FC}")" -c "$(type -P "${CC}")" -C "$(type -P "${CXX}")"
      cd prerequisites/builds/opencoarrays/*
      ../../../installations/cmake/*/bin/ctest --output-on-failure --schedule-random --repeat-until-fail 7
      cd -
    else
      mkdir cmake-build
      for BUILD_TYPE in ${BUILD_TYPES}; do
        rm -rf cmake-build/* || true
        cd cmake-build
        cmake -DCMAKE_INSTALL_PREFIX:PATH="${HOME}/OpenCoarrays" -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" ..
        make -j 4
        ctest --output-on-failure --schedule-random --repeat-until-fail 7
        make install
        make uninstall
        cd ..
      done
    fi
    set +o errexit

after_script:
  - |
    set -o errexit
    if [[ "${TRAVIS_TAG}" ]]; then
      if [[ "v${TRAVIS_TAG}" != "v$(sed -n '/[0-9]\{1,\}\(\.[0-9]\{1,\}\)\{1,\}/{s/^\([^.]*\)\([0-9]\{1,\}\(\.[0-9]\{1,\}\)\{1,\}\)\(.*\)/\2/p;q;}' .VERSION)" ]]; then
        echo "ERROR: You are trying to tag a new release but have a version missmatch in \`.VERSION\`"
        false # throw an error
      fi
    fi
    set +o errexit

after_success:
  - find . -name '*.gcno' -print
  - gcov-${GCC} --version
  - bash <(curl -s https://codecov.io/bash) -x $(type -P gcov-${GCC})

# before_deploy:
#   - git archive -v --prefix "OpenCoarrays-${TRAVIS_TAG}/" -o "OpenCoarrays-${TRAVIS_TAG}.tar.gz" ${TRAVIS_TAG}
#   - |
#     echo '# To verify cryptographic checksums `shasum -c opencoarrays-'"${TRAVIS_TAG}"'-SHA256.txt` on Mac OS X,' > "opencoarrays-${TRAVIS_TAG}-SHA256.txt
#     echo '# `sha256sum -c  opencoarrays-'"${TRAVIS_TAG}"'-SHA256.txt` on Linux.' >> "opencoarrays-${TRAVIS_TAG}-SHA256.txt
#     if [[ $(uname -s) == Darwin ]]; then
#       shasum -a 256 "OpenCoarrays-${TRAVIS_TAG}.tar.gz" >> "opencoarrays-${TRAVIS_TAG}-SHA256.txt
#     else
#       sha256sum  "OpenCoarrays-${TRAVIS_TAG}.tar.gz" >> "opencoarrays-${TRAVIS_TAG}-SHA256.txt
#     fi
#   - |
#     set -o errexit
#     openssl aes-256-cbc -K ${encrypted_ef4535c39461_key} -iv ${encrypted_ef4535c39461_iv} -in subkey-328B3A0E-secret.asc.enc -out ./subkey-328B3A0E-secret.asc -d
#     gpg --allow-secret-key-import --import ./subkey-328B3A0E-secret.asc && rm subkey-328B3A0E-secret.asc
#     rm subkey-328B3A0E-secret.* || true
#     unset encrypted_ef4535c39461_key || true
#     unset encrypted_ef4535c39461_iv || true
#     gpg --armor --detach-sign -u 328B3A0E --comment 'Mac users can use GPGTools - https://gpgtools.org' \
#       --comment "Download Izaak Beekman's GPG public key from your" \
#       --comment 'trusted key server or from' \
#       --comment 'https://izaakbeekman.com/izaak.pubkey.txt' \
#       --comment 'Next add it to your GPG keyring, e.g.,' \
#       --comment '`curl https://izaakbeekman.com/izaak.pubkey.txt | gpg --import`' \
#       --comment "Make sure you have verified that the release archive's" \
#       --comment 'SHA256 checksum matches the provided' \
#       --comment "opencoarrays-${TRAVIS_TAG}-SHA256.txt and ensure that this file" \
#       --comment "and it's signature are in the same directory. Then" \
#       --comment 'verify with:' \
#       --comment '`gpg --verify opencoarrays-'"${TRAVIS_TAG}"'-SHA256.txt.asc`' \
#       "opencoarrays-${TRAVIS_TAG}-SHA256.txt"
#     set +o errexit

# deploy:
#   provider: releases
#   api_key:
#     secure: lBj4VgKhU74xfzPc0CDIji6cFrN/xEQIHLHjMcnDPWEF5JQe79aunMS5qiYu5ttve6khGI1WMFEe7clUO3TXiDUPyRMS4M8B2q3fuvUIsIbYgWcKq7ut+x6+dEQDj4DE3yWpPb8IDugWFp4vno1eQ2Rid1yr6Vn+rjnbE2i6z5SkXPnIv1ziQ9G+TF4ChUA8IOd1T78gJmML86P0rbt6nW8eVuJbza2y1ggHAY//q/b6rrbOFw5PqiOBqZ/BRrKJ5d2U2mvsoZtNn4OYyXw4eKEvNDIydwaIZROXfPRmN9zJ5G7+01QA5jlXpq17KfPBr7MXkn7nrQ5q9Z2ji4hRHk/AFzM/etfl1k4WCshYs13NlORpnU0vZtCMmmmsXWxj2kpsOHLWZQKdUAPs3olMPIG6aVnO5Abk1vrVSNy/ZeknbBTKCGScET1qRSaj6d43ynBwGkqHgaJdLBAwGe0Dpap6SsLGsAg56ZqHTngGlXB1KsbJKMkUsSC5RAgEuh9m55nsMaRlTYTrv+YADAQts7lV8yMCciMeJlrd3EYryyn4ZY1O82eOofhZZ5vQUktbXHtg6YnzguFwQyn+9yY/CQfi/vu2Aoq79NJEO/9UJ82ogn6gOoIebzb0xgIONjw4M68luR2U1CXtibzSYKWLGTeOj43khqZdbOpp6xncIv0=
#   file:
#     - "OpenCoarrays-${TRAVIS_TAG}.tar.gz"
#     - "opencoarrays-${TRAVIS_TAG}-SHA256.txt"
#     - "opencoarrays-${TRAVIS_TAG}-SHA256.txt.asc"
#   skip_cleanup: true
#   on:
#     tags: true
#    repo: sourceryinstitute/opencoarrays

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/93dbafbdf76c1732a623
      - https://webhooks.gitter.im/e/935231573bf1b9f2fe40
    on_success: change  # options: [always|never|change]
    on_failure: always
    on_start: always
