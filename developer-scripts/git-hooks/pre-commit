#!/bin/bash
#
# Git pre-commit hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# Checks performed by this script include:
#
# 1. Verifying that all text-based files end in a single new line character (appropriate for the given OS)
# 2. No spurious, extra blank lines are at the end of a file textfile
# 3. No files with non-ascii names are added to the git repo unless explicitly enabled in the git-config
# 4. All files being committed conform to the git-config whitespace policy

set -o errexit
set -o pipefail
set -o nounset
set -o errtrace

__file=pre-commit

err_report() {
    error_code=$?
    echo 2>&1 "Error in $__file in function $1 on line $2"
    exit $error_code
}

trap 'err_report "${FUNCNAME:-.}" $LINENO' ERR

function ends_with_newline() {
    [[ ! -s "$1" ]] || [[ "$(tail -c1 "$1" | xxd -ps)" = "0a" ]]
}

function ends_with_single_new_line () {
    ends_with_newline "$1" && tail -1 "$1" | grep '[^[:blank:]]' >/dev/null 2>&1
}

if git rev-parse --verify HEAD >/dev/null 2>&1 ; then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# if we are in the middle of merging skip hooks
if git rev-parse MERGE_HEAD >/dev/null 2>&1 ; then
  exit 0
fi

if git rev-parse CHERRY_PICK_HEAD >/dev/null 2>&1 ; then
  exit 0
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii || true)

# Redirect output to stderr.
exec 1>&2

status=0
# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
     # Note that the use of brackets around a tr range is ok here, (it's
     # even required, for portability to Solaris 10's /usr/bin/tr), since
     # the square bracket bytes happen to fall in the designated range.
     (( "$(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0 ))
then
  cat <<-EOF
    Error: Attempt to add a non-ASCII file name.
    This can cause problems if you want to work with people on other platforms.
    To be portable it is advisable to rename the file.
    If you know what you are doing you can disable this check using:
        git config hooks.allownonascii true
EOF
  status=1
fi

# If there is a file that does not end with a newline, print its name and fail.
for f in $(git diff-index --name-status --cached $against | grep -v ^D | cut -c3-); do
    if [[ "$f" =~ ([.](h|m|c|rb|sh|py|txt|md|f90|F90|cmake|x64|csh|txt)|makefile|Makefile)$ ]] ||
       head -n 1 | grep '^#!/'; then
	if ! ends_with_newline "$f"; then
	    echo "No newline at end of file: $f"
	    echo ""
	    status=1
	fi
	if ! ends_with_single_new_line "$f"; then
	    echo "multiple blank lines at end of file: $f"
	    echo ""
	    status=1
	fi
    fi
done

# If there are whitespace errors, print the offending file names and fail.
if ! git diff-index --check --cached $against -- ; then
  status=1
  echo "white space violations found"
fi


if [[ $status = 0 ]]; then
  exit 0
fi

exit 1
